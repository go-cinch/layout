// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.0
// - protoc             v3.17.3
// source: helloworld/v1/helloword.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationHelloworldCreateGreeter = "/helloworld.v1.Helloworld/CreateGreeter"
const OperationHelloworldDeleteGreeter = "/helloworld.v1.Helloworld/DeleteGreeter"
const OperationHelloworldFindGreeter = "/helloworld.v1.Helloworld/FindGreeter"
const OperationHelloworldGetGreeter = "/helloworld.v1.Helloworld/GetGreeter"
const OperationHelloworldUpdateGreeter = "/helloworld.v1.Helloworld/UpdateGreeter"

type HelloworldHTTPServer interface {
	CreateGreeter(context.Context, *CreateGreeterRequest) (*emptypb.Empty, error)
	DeleteGreeter(context.Context, *IdsRequest) (*emptypb.Empty, error)
	FindGreeter(context.Context, *FindGreeterRequest) (*FindGreeterReply, error)
	GetGreeter(context.Context, *GetGreeterRequest) (*GetGreeterReply, error)
	UpdateGreeter(context.Context, *UpdateGreeterRequest) (*emptypb.Empty, error)
}

func RegisterHelloworldHTTPServer(s *http.Server, srv HelloworldHTTPServer) {
	r := s.Route("/")
	r.POST("/greeter", _Helloworld_CreateGreeter0_HTTP_Handler(srv))
	r.GET("/greeter/{id}", _Helloworld_GetGreeter0_HTTP_Handler(srv))
	r.GET("/greeter", _Helloworld_FindGreeter0_HTTP_Handler(srv))
	r.PATCH("/greeter/{id}", _Helloworld_UpdateGreeter0_HTTP_Handler(srv))
	r.PUT("/greeter/{id}", _Helloworld_UpdateGreeter1_HTTP_Handler(srv))
	r.DELETE("/greeter/{ids}", _Helloworld_DeleteGreeter0_HTTP_Handler(srv))
}

func _Helloworld_CreateGreeter0_HTTP_Handler(srv HelloworldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateGreeterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHelloworldCreateGreeter)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateGreeter(ctx, req.(*CreateGreeterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Helloworld_GetGreeter0_HTTP_Handler(srv HelloworldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetGreeterRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHelloworldGetGreeter)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetGreeter(ctx, req.(*GetGreeterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetGreeterReply)
		return ctx.Result(200, reply)
	}
}

func _Helloworld_FindGreeter0_HTTP_Handler(srv HelloworldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FindGreeterRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHelloworldFindGreeter)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FindGreeter(ctx, req.(*FindGreeterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FindGreeterReply)
		return ctx.Result(200, reply)
	}
}

func _Helloworld_UpdateGreeter0_HTTP_Handler(srv HelloworldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateGreeterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHelloworldUpdateGreeter)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateGreeter(ctx, req.(*UpdateGreeterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Helloworld_UpdateGreeter1_HTTP_Handler(srv HelloworldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateGreeterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHelloworldUpdateGreeter)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateGreeter(ctx, req.(*UpdateGreeterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Helloworld_DeleteGreeter0_HTTP_Handler(srv HelloworldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IdsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHelloworldDeleteGreeter)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteGreeter(ctx, req.(*IdsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type HelloworldHTTPClient interface {
	CreateGreeter(ctx context.Context, req *CreateGreeterRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteGreeter(ctx context.Context, req *IdsRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	FindGreeter(ctx context.Context, req *FindGreeterRequest, opts ...http.CallOption) (rsp *FindGreeterReply, err error)
	GetGreeter(ctx context.Context, req *GetGreeterRequest, opts ...http.CallOption) (rsp *GetGreeterReply, err error)
	UpdateGreeter(ctx context.Context, req *UpdateGreeterRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type HelloworldHTTPClientImpl struct {
	cc *http.Client
}

func NewHelloworldHTTPClient(client *http.Client) HelloworldHTTPClient {
	return &HelloworldHTTPClientImpl{client}
}

func (c *HelloworldHTTPClientImpl) CreateGreeter(ctx context.Context, in *CreateGreeterRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/greeter"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationHelloworldCreateGreeter))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *HelloworldHTTPClientImpl) DeleteGreeter(ctx context.Context, in *IdsRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/greeter/{ids}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationHelloworldDeleteGreeter))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *HelloworldHTTPClientImpl) FindGreeter(ctx context.Context, in *FindGreeterRequest, opts ...http.CallOption) (*FindGreeterReply, error) {
	var out FindGreeterReply
	pattern := "/greeter"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationHelloworldFindGreeter))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *HelloworldHTTPClientImpl) GetGreeter(ctx context.Context, in *GetGreeterRequest, opts ...http.CallOption) (*GetGreeterReply, error) {
	var out GetGreeterReply
	pattern := "/greeter/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationHelloworldGetGreeter))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *HelloworldHTTPClientImpl) UpdateGreeter(ctx context.Context, in *UpdateGreeterRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/greeter/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationHelloworldUpdateGreeter))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
