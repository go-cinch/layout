// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-cinch/layout/internal/biz"
	"github.com/go-cinch/layout/internal/conf"
	"github.com/go-cinch/layout/internal/data"
	"github.com/go-cinch/layout/internal/pkg/idempotent"
	"github.com/go-cinch/layout/internal/pkg/task"
	"github.com/go-cinch/layout/internal/server"
	"github.com/go-cinch/layout/internal/service"
	"github.com/go-kratos/kratos/v2"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(c *conf.Bootstrap) (*kratos.App, func(), error) {
	universalClient, err := data.NewRedis(c)
	if err != nil {
		return nil, nil, err
	}
	idempotentIdempotent, err := idempotent.NewIdempotent(c, universalClient)
	if err != nil {
		return nil, nil, err
	}
	authClient, err := data.NewAuthClient(c)
	if err != nil {
		return nil, nil, err
	}
	db, err := data.NewDB(c)
	if err != nil {
		return nil, nil, err
	}
	sonyflake, err := data.NewSonyflake(c)
	if err != nil {
		return nil, nil, err
	}
	tracerProvider, err := data.NewTracer(c)
	if err != nil {
		return nil, nil, err
	}
	dataData, cleanup := data.NewData(universalClient, db, sonyflake, tracerProvider, authClient)
	gameRepo := data.NewGameRepo(dataData)
	transaction := data.NewTransaction(dataData)
	cache := data.NewCache(universalClient)
	gameUseCase := biz.NewGameUseCase(c, gameRepo, transaction, cache)
	taskTask, err := task.NewTask(c, gameUseCase)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	gameService := service.NewGameService(taskTask, idempotentIdempotent, gameUseCase)
	grpcServer := server.NewGRPCServer(c, idempotentIdempotent, authClient, gameService)
	httpServer := server.NewHTTPServer(c, idempotentIdempotent, authClient, gameService)
	app := newApp(grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
